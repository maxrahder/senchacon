/*
 * File: app/view/presentation/PresentationViewPanelViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Test.view.presentation.PresentationViewPanelViewModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.presentationpresentationviewpanel',

    requires: [
        'Ext.data.Store',
        'Ext.util.Filter',
        'Ext.util.Sorter'
    ],

    stores: {
        presentations: {
            autoLoad: true,
            model: 'Test.model.Presentation',
            filters: [
                {
                    filterFn: function(item) {
                        var track = item.data.track;
                        var isTrack =
                        (this.track.design		&& (track==="Design")) 	||
                        (this.track.develop 	&& (track==="Develop")) ||
                        (this.track.deploy 		&& (track==="Deploy"));
                        return isTrack;

                    },
                    track: {
                        design: '{design.pressed}',
                        develop: '{develop.pressed}',
                        deploy: '{deploy.pressed}'
                    },
                    id: 'track'
                },
                {
                    filterFn: function(item) {
                        return (item.data.startTime.getDay() === this.dayOfWeek);

                    },
                    dayOfWeek: '{dayOfWeek.value}',
                    id: 'dayOfWeek'
                },
                {
                    filterFn: function(item) {
                        return (!this.favorites || Test.stateProvider.get(item.data.id)) ;
                    },
                    favorites: '{favorites.pressed}',
                    id: 'favorites'
                },
                {
                    filterFn: function(item) {
                        return true;
                    },
                    searchTerm: null,
                    id: 'search'
                }
            ],
            sorters: [
                {
                    property: 'startTime'
                },
                {
                    property: 'track'
                }
            ],
            listeners: {
                load: 'onStoreLoad',
                update: 'onStoreUpdate'
            }
        }
    }

});